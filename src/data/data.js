export const professionData = {
    'Frontend разработчик': {
      questions: [
        { quest: 'Почему выбрано направление frontend и javascript?', likeQuantity: 36, tags: [{ name: 'HTML' }, { name: 'JAVASCRIPT' }, { name: 'CSS' }], isLiked: true, isPined: true },
        { quest: 'Какие типы данных существуют в javascript?', likeQuantity: 15, tags: [ { name: 'JAVASCRIPT' }], isLiked: false, isPined: false },
        { quest: 'Что такое promise и какие состояния у него есть?', likeQuantity: 23, tags: [{ name: 'JAVASCRIPT' }], isLiked: true, isPined: false },
        { quest: 'Чем let отличается let от var?', likeQuantity: 10, tags: [{ name: 'JAVASCRIPT' }], isLiked: false, isPined: false },
        { quest: 'Что такое "состояние" (state) в React, и как его обновлять?', likeQuantity: 16, tags: [{ name: 'JAVASCRIPT' }, { name: 'REACT' }], isLiked: true, isPined: true },
        { quest: 'Что такое реактивность в Vue, и как она работает?', likeQuantity: 12, tags: [{ name: 'VUE' }, { name: 'JAVASCRIPT' }], isLiked: false, isPined: false },
        { quest: 'Что такое каскадность в CSS, и как она влияет на стили?', likeQuantity: 61, tags: [{ name: 'CSS' }], isLiked: true, isPined: false },
        { quest: 'Для чего используется Nuxt.js в разработке?', likeQuantity: 10, tags: [{ name: 'VUE' },{ name: 'NUXT' }], isLiked: false, isPined: false },
        { quest: 'Что такое Tailwind CSS, и как его использовать?', likeQuantity: 1, tags: [{ name: 'CSS' },{ name: 'TAILWIND' }], isLiked: true, isPined: false },
        { quest: 'Что такое семантические теги в HTML, и почему их важно использовать?', likeQuantity: 10, tags: [{ name: 'HTML' }], isLiked: false, isPined: false },
      ],
      proftags: [
        { name: 'HTML' },
        { name: 'JAVASCRIPT' },
        { name: 'REACT' },
        { name: 'VUE' },
        { name: 'NUXT' },
        { name: 'ANGULAR' },
        { name: 'NEXT' },
        { name: 'TAILWIND' },
        { name: 'BOOTSTRAP' },
        { name: 'CSS' },
      ],
      question_content: [
        { text: 'Frontend-разработка — одно из самых популярных направлений в IT, поскольку веб-приложения и сайты являются основой современного интернета.JavaScript — язык, который обязателен для фронтенд-разработчиков. С его помощью создаются интерактивные элементы и динамичные пользовательские интерфейсы.' },
        { text: 'В JavaScript существует 8 типов данных, которые делятся на примитивные и объектные. Примитивные:string , number , bigint , boolean , undefined , null , symbol , object. Объектные типы: объекты , массивы , функций.' },
        { text: 'Promise (промис) — это объект в JavaScript, который используется для работы с асинхронными операциями. Промисы позволяют обрабатывать результат асинхронной задачи (успешный или с ошибкой) в удобной цепочке вызовов.' },
        { text: 'Let: Блоковая область видимости ({}).Нельзя повторно объявить в одной области видимости. Var: Функциональная область видимости. Можно повторно объявить.' },
        { text: 'Состояние (state) — это объект, который хранит данные, управляющие поведением компонента. Оно определяет, как компонент будет отображаться и реагировать на действия пользователя. В функциональных компонентах состояние создаётся с помощью хука useState. Для его обновления используется специальная функция, возвращаемая хукoм.' },
        { text: 'Реактивность в Vue — это способность автоматически обновлять интерфейс при изменении данных. Vue отслеживает изменения в объектах данных, добавляя "обёртки" вокруг их свойств через методы, такие как Object.defineProperty (в версиях до 3) или Proxy (начиная с Vue 3). Это позволяет разработчикам просто изменять данные, а Vue автоматически обновляет связанные части интерфейса.' },
        { text: 'Каскадность — это принцип CSS, согласно которому приоритет стилей определяется их местоположением, специфичностью и порядком.' },
        { text: 'Nuxt.js — это фреймворк на основе Vue.js, предназначенный для создания серверных (SSR) и статически генерируемых приложений (SSG). Он упрощает работу с маршрутизацией, рендерингом на стороне сервера и оптимизацией приложений. Основные преимущества: улучшение SEO благодаря SSR и простая настройка с предопределёнными структурами папок.' },
        { text: 'Tailwind CSS — это утилитарный CSS-фреймворк, предоставляющий классы для быстрой стилизации элементов. Вместо написания кастомных стилей в файлах CSS, разработчик использует готовые классы.' },
        { text: 'Семантические теги в HTML описывают смысл содержимого, делая структуру документа понятной как для разработчиков, так и для поисковых систем.' },
      ],
    },
    'Backend разработчик': {
      questions: [
        { quest: 'Что такое REST и какие принципы он включает?', likeQuantity: 42, tags: [{ name: 'API' }, { name: 'REST' }], isLiked: true, isPined: false },
        { quest: 'Чем отличаются GET и POST запросы в HTTP?', likeQuantity: 34, tags: [{ name: 'HTTP' }, { name: 'API' }], isLiked: false, isPined: false },
        { quest: 'Что такое JWT и как его использовать для авторизации?', likeQuantity: 29, tags: [{ name: 'JWT' }, { name: 'SECURITY' }], isLiked: true, isPined: true },
        { quest: 'Объясните основные принципы работы Docker.', likeQuantity: 20, tags: [{ name: 'DOCKER' }], isLiked: false, isPined: false },
        { quest: 'Какая разница между SQL и NoSQL базами данных?', likeQuantity: 53, tags: [{ name: 'DATABASES' }], isLiked: true, isPined: false },
        { quest: 'Что такое middleware в веб-приложениях?', likeQuantity: 18, tags: [{ name: 'MIDDLEWARE' }, { name: 'NODEJS' }], isLiked: false, isPined: false },
        { quest: 'Объясните процесс настройки CORS в серверных приложениях.', likeQuantity: 13, tags: [{ name: 'CORS' }, { name: 'API' }], isLiked: true, isPined: false },
        { quest: 'Что такое ORM, и какие популярные инструменты ORM существуют?', likeQuantity: 24, tags: [{ name: 'DATABASES' }, { name: 'ORM' }], isLiked: false, isPined: false },
        { quest: 'Для чего используется Redis в бекенд-разработке?', likeQuantity: 19, tags: [{ name: 'CACHE' }, { name: 'REDIS' }], isLiked: true, isPined: false },
        { quest: 'Что такое веб-сокеты и как они работают?', likeQuantity: 21, tags: [{ name: 'WEB SOCKETS' }, { name: 'REALTIME' }], isLiked: false, isPined: false },
      ],
      proftags: [
        { name: 'API' },
        { name: 'REST' },
        { name: 'HTTP' },
        { name: 'JWT' },
        { name: 'SECURITY' },
        { name: 'DOCKER' },
        { name: 'DATABASES' },
        { name: 'MIDDLEWARE' },
        { name: 'NODEJS' },
        { name: 'CORS' },
        { name: 'ORM' },
        { name: 'CACHE' },
        { name: 'REDIS' },
        { name: 'WEB SOCKETS' },
        { name: 'REALTIME' },
      ],
      question_content: [
        { text: 'REST (Representational State Transfer) — это архитектурный стиль, основанный на использовании стандартных HTTP методов (GET, POST, PUT, DELETE) для взаимодействия между клиентом и сервером.' },
        { text: 'GET используется для получения данных, а POST — для отправки данных на сервер. GET-запросы не изменяют состояние сервера, а POST может это делать.' },
        { text: 'JWT (JSON Web Token) — это стандарт для передачи данных между сторонами в формате JSON. Используется для аутентификации и авторизации, часто в виде токенов доступа.' },
        { text: 'Docker — это инструмент для контейнеризации приложений, позволяющий запускать программное обеспечение в изолированных контейнерах.' },
        { text: 'SQL базы данных используют таблицы и строго структурированные данные, тогда как NoSQL базы поддерживают более гибкие структуры, такие как документы, ключ-значение или графы.' },
        { text: 'Middleware — это функции, которые обрабатывают запросы и ответы в веб-приложении. Например, они могут проверять авторизацию или логировать запросы.' },
        { text: 'CORS (Cross-Origin Resource Sharing) — это механизм, который позволяет ограничивать или разрешать запросы с других доменов. Его настройка зависит от серверной платформы.' },
        { text: 'ORM (Object-Relational Mapping) — это инструмент, который преобразует данные из реляционной базы в объектную модель. Популярные ORM: Sequelize, Hibernate, TypeORM.' },
        { text: 'Redis — это система хранения данных в оперативной памяти, часто используемая для кэширования или хранения сессий.' },
        { text: 'Веб-сокеты позволяют устанавливать двустороннюю связь между клиентом и сервером в режиме реального времени, например, для чатов или уведомлений.' },
      ],
    },
    'Data-Аналитик': {
      questions: [
        { quest: 'Что такое ETL-процесс и как он используется?', likeQuantity: 40, tags: [{ name: 'ETL' }, { name: 'DATA PROCESSING' }], isLiked: true, isPined: false },
        { quest: 'Какие виды данных вы знаете и как их анализировать?', likeQuantity: 25, tags: [{ name: 'DATA TYPES' }], isLiked: false, isPined: false },
        { quest: 'Объясните разницу между корреляцией и причинностью.', likeQuantity: 18, tags: [{ name: 'STATISTICS' }], isLiked: true, isPined: false },
        { quest: 'Какие инструменты визуализации данных вы предпочитаете?', likeQuantity: 30, tags: [{ name: 'VISUALIZATION' }, { name: 'TOOLS' }], isLiked: false, isPined: false },
        { quest: 'Что такое регрессия и как ее использовать для анализа?', likeQuantity: 20, tags: [{ name: 'STATISTICS' }, { name: 'ANALYSIS' }], isLiked: true, isPined: false },
        { quest: 'Как вы определяете аномалии в наборе данных?', likeQuantity: 12, tags: [{ name: 'DATA CLEANING' }], isLiked: false, isPined: false },
        { quest: 'Что такое SQL, и как он используется в анализе данных?', likeQuantity: 50, tags: [{ name: 'SQL' }], isLiked: true, isPined: true },
        { quest: 'Объясните различие между структурированными и неструктурированными данными.', likeQuantity: 15, tags: [{ name: 'DATA TYPES' }], isLiked: false, isPined: false },
        { quest: 'Какие метрики качества данных вам известны?', likeQuantity: 10, tags: [{ name: 'DATA QUALITY' }], isLiked: false, isPined: false },
        { quest: 'Что такое BI-инструменты, и для чего они используются?', likeQuantity: 8, tags: [{ name: 'BI' }, { name: 'TOOLS' }], isLiked: true, isPined: false },
      ],
      proftags: [
        { name: 'ETL' },
        { name: 'DATA PROCESSING' },
        { name: 'DATA TYPES' },
        { name: 'STATISTICS' },
        { name: 'VISUALIZATION' },
        { name: 'TOOLS' },
        { name: 'DATA CLEANING' },
        { name: 'SQL' },
        { name: 'DATA QUALITY' },
        { name: 'BI' },
      ],
      question_content: [
        { text: 'ETL (Extract, Transform, Load) — это процесс извлечения данных из различных источников, преобразования их в подходящий формат и загрузки в целевую систему.' },
        { text: 'Данные могут быть структурированными, неструктурированными и полуструктурированными. Анализ данных требует понимания их типов и особенностей.' },
        { text: 'Корреляция показывает взаимосвязь между переменными, а причинность — отношение причины и следствия.' },
        { text: 'Инструменты визуализации, такие как Tableau или Power BI, помогают представлять данные в виде графиков и диаграмм.' },
        { text: 'Регрессия используется для прогнозирования значений целевой переменной на основе независимых переменных.' },
        { text: 'Определение аномалий включает поиск значений, которые отличаются от типичного распределения данных.' },
        { text: 'SQL — это язык запросов для управления данными в реляционных базах данных.' },
        { text: 'Структурированные данные имеют четкую схему (таблицы), а неструктурированные — хаотичный вид (тексты, изображения).' },
        { text: 'Качество данных оценивается по полноте, точности, актуальности и согласованности.' },
        { text: 'BI-инструменты используются для анализа данных и поддержки принятия решений.' },
      ],
    },
    'DevOps инженер': {
      questions: [
        { quest: 'Что такое DevOps и зачем он нужен?', likeQuantity: 45, tags: [{ name: 'DEVOPS' }, { name: 'CULTURE' }], isLiked: true, isPined: false },
        { quest: 'Какие инструменты автоматизации CI/CD вы знаете?', likeQuantity: 30, tags: [{ name: 'CI/CD' }, { name: 'TOOLS' }], isLiked: true, isPined: true },
        { quest: 'Объясните принцип работы контейнеров в Docker.', likeQuantity: 22, tags: [{ name: 'DOCKER' }], isLiked: false, isPined: false },
        { quest: 'Что такое Kubernetes, и зачем он используется?', likeQuantity: 18, tags: [{ name: 'KUBERNETES' }, { name: 'ORCHESTRATION' }], isLiked: true, isPined: false },
        { quest: 'Как вы работаете с мониторингом и логированием систем?', likeQuantity: 35, tags: [{ name: 'MONITORING' }, { name: 'LOGGING' }], isLiked: false, isPined: true },
        { quest: 'Что такое инфраструктура как код (IaC)?', likeQuantity: 15, tags: [{ name: 'INFRASTRUCTURE' }, { name: 'IaC' }], isLiked: true, isPined: false },
        { quest: 'Какие системы управления версиями вы используете?', likeQuantity: 50, tags: [{ name: 'GIT' }, { name: 'VERSION CONTROL' }], isLiked: false, isPined: false },
        { quest: 'Объясните принцип "Immutable Infrastructure".', likeQuantity: 12, tags: [{ name: 'INFRASTRUCTURE' }], isLiked: true, isPined: false },
        { quest: 'Как вы подходите к обеспечению безопасности DevOps-процессов?', likeQuantity: 17, tags: [{ name: 'SECURITY' }, { name: 'DEVOPS' }], isLiked: false, isPined: false },
        { quest: 'Чем отличается Continuous Deployment от Continuous Delivery?', likeQuantity: 8, tags: [{ name: 'CI/CD' }, { name: 'PROCESSES' }], isLiked: true, isPined: false },
      ],
      proftags: [
        { name: 'DEVOPS' },
        { name: 'CI/CD' },
        { name: 'DOCKER' },
        { name: 'KUBERNETES' },
        { name: 'MONITORING' },
        { name: 'LOGGING' },
        { name: 'INFRASTRUCTURE' },
        { name: 'IaC' },
        { name: 'GIT' },
        { name: 'SECURITY' },
      ],
      question_content: [
        { text: 'DevOps — это набор практик, объединяющих разработчиков и системных администраторов для ускорения выпуска программного обеспечения.' },
        { text: 'CI/CD — это подход автоматизации процессов сборки, тестирования и развертывания приложений. Инструменты: Jenkins, GitLab CI/CD, CircleCI.' },
        { text: 'Docker — это платформа контейнеризации, которая упрощает создание, тестирование и развертывание приложений в изолированных контейнерах.' },
        { text: 'Kubernetes — это система оркестрации контейнеров, которая управляет их масштабированием и отказоустойчивостью.' },
        { text: 'Мониторинг систем включает использование инструментов, таких как Prometheus или Grafana, а логирование — ELK Stack (Elasticsearch, Logstash, Kibana).' },
        { text: 'IaC позволяет описывать инфраструктуру с помощью кода, что упрощает управление и автоматизацию.' },
        { text: 'Системы управления версиями, такие как Git, помогают отслеживать изменения кода и совместно работать в команде.' },
        { text: 'Immutable Infrastructure предполагает, что серверы не изменяются после их создания. Это повышает надежность системы.' },
        { text: 'Для обеспечения безопасности DevOps используют методы контроля доступа, шифрования и сканирования уязвимостей.' },
        { text: 'Continuous Deployment включает автоматическое развертывание на продакшен, а Continuous Delivery требует ручного подтверждения.' },
      ],
    },
    'Machine Learning': {
      questions: [
        { quest: 'Что такое машинное обучение и его основные типы?', likeQuantity: 50, tags: [{ name: 'ML BASICS' }, { name: 'TYPES' }], isLiked: true, isPined: false },
        { quest: 'Какие алгоритмы машинного обучения вы знаете?', likeQuantity: 35, tags: [{ name: 'ALGORITHMS' }], isLiked: false, isPined: true },
        { quest: 'Объясните, как работает метод k-ближайших соседей (kNN).', likeQuantity: 20, tags: [{ name: 'ALGORITHMS' }, { name: 'kNN' }], isLiked: true, isPined: false },
        { quest: 'Что такое переобучение (overfitting) и как с ним бороться?', likeQuantity: 25, tags: [{ name: 'MODEL OPTIMIZATION' }], isLiked: true, isPined: false },
        { quest: 'Какие метрики используются для оценки качества моделей?', likeQuantity: 15, tags: [{ name: 'METRICS' }], isLiked: false, isPined: false },
        { quest: 'Как работает линейная регрессия?', likeQuantity: 30, tags: [{ name: 'REGRESSION' }, { name: 'LINEAR MODELS' }], isLiked: false, isPined: false },
        { quest: 'Что такое градиентный спуск и как он используется?', likeQuantity: 22, tags: [{ name: 'OPTIMIZATION' }, { name: 'GRADIENT DESCENT' }], isLiked: true, isPined: false },
        { quest: 'Какие различия между обучением с учителем и без учителя?', likeQuantity: 18, tags: [{ name: 'SUPERVISED' }, { name: 'UNSUPERVISED' }], isLiked: false, isPined: true },
        { quest: 'Что такое нейронная сеть и как она работает?', likeQuantity: 40, tags: [{ name: 'NEURAL NETWORKS' }], isLiked: true, isPined: false },
        { quest: 'Объясните использование деревьев решений в машинном обучении.', likeQuantity: 10, tags: [{ name: 'DECISION TREES' }, { name: 'ALGORITHMS' }], isLiked: false, isPined: false },
      ],
      proftags: [
        { name: 'ML BASICS' },
        { name: 'TYPES' },
        { name: 'ALGORITHMS' },
        { name: 'kNN' },
        { name: 'MODEL OPTIMIZATION' },
        { name: 'METRICS' },
        { name: 'REGRESSION' },
        { name: 'LINEAR MODELS' },
        { name: 'OPTIMIZATION' },
        { name: 'GRADIENT DESCENT' },
        { name: 'SUPERVISED' },
        { name: 'UNSUPERVISED' },
        { name: 'NEURAL NETWORKS' },
        { name: 'DECISION TREES' },
      ],
      question_content: [
        { text: 'Машинное обучение — это область ИИ, где алгоритмы обучаются находить закономерности в данных. Типы: с учителем, без учителя и с подкреплением.' },
        { text: 'Популярные алгоритмы: линейная регрессия, SVM, kNN, деревья решений, градиентный бустинг.' },
        { text: 'k-ближайших соседей (kNN) классифицирует данные, основываясь на их ближайших соседях в пространстве признаков.' },
        { text: 'Переобучение — это ситуация, когда модель хорошо работает на обучающих данных, но плохо на тестовых. Методы борьбы: регуляризация, кросс-валидация.' },
        { text: 'Метрики: точность (accuracy), полнота (recall), F1-Score, ROC-AUC.' },
        { text: 'Линейная регрессия предсказывает значения, основываясь на линейной зависимости между переменными.' },
        { text: 'Градиентный спуск — это оптимизационный алгоритм, который минимизирует функцию потерь, обновляя веса модели.' },
        { text: 'Обучение с учителем использует размеченные данные, а без учителя — только сырые данные для выявления скрытых закономерностей.' },
        { text: 'Нейронная сеть состоит из слоев узлов (нейронов), которые обрабатывают данные через функции активации и веса.' },
        { text: 'Деревья решений представляют собой графы, которые разветвляются в зависимости от значений признаков данных.' },
      ],
    },
    'IOS разработчик': {
      questions: [
        { quest: 'Что такое MVC, и как он используется в разработке iOS?', likeQuantity: 40, tags: [{ name: 'MVC' }, { name: 'ARCHITECTURE' }], isLiked: true, isPined: false },
        { quest: 'Какие основные отличия Swift от Objective-C?', likeQuantity: 25, tags: [{ name: 'SWIFT' }, { name: 'LANGUAGES' }], isLiked: false, isPined: true },
        { quest: 'Что такое Auto Layout, и как его использовать?', likeQuantity: 30, tags: [{ name: 'LAYOUT' }, { name: 'TOOLS' }], isLiked: true, isPined: false },
        { quest: 'Какие жизненные циклы UIViewController вы знаете?', likeQuantity: 18, tags: [{ name: 'LIFECYCLE' }, { name: 'VIEWCONTROLLER' }], isLiked: false, isPined: false },
        { quest: 'Как вы работаете с Core Data в iOS?', likeQuantity: 22, tags: [{ name: 'CORE DATA' }, { name: 'DATABASE' }], isLiked: true, isPined: false },
        { quest: 'Что такое Grand Central Dispatch (GCD)?', likeQuantity: 20, tags: [{ name: 'GCD' }, { name: 'CONCURRENCY' }], isLiked: true, isPined: false },
        { quest: 'Какие типы навигации используются в iOS приложениях?', likeQuantity: 15, tags: [{ name: 'NAVIGATION' }], isLiked: false, isPined: false },
        { quest: 'Как работает система обработки уведомлений в iOS?', likeQuantity: 12, tags: [{ name: 'NOTIFICATIONS' }], isLiked: true, isPined: false },
        { quest: 'Объясните, как работает Delegate и когда его использовать.', likeQuantity: 35, tags: [{ name: 'DELEGATE' }, { name: 'PATTERNS' }], isLiked: false, isPined: true },
        { quest: 'Что такое SwiftUI, и чем он отличается от UIKit?', likeQuantity: 50, tags: [{ name: 'SWIFTUI' }, { name: 'UI' }], isLiked: true, isPined: false },
      ],
      proftags: [
        { name: 'MVC' },
        { name: 'ARCHITECTURE' },
        { name: 'SWIFT' },
        { name: 'LANGUAGES' },
        { name: 'LAYOUT' },
        { name: 'TOOLS' },
        { name: 'LIFECYCLE' },
        { name: 'VIEWCONTROLLER' },
        { name: 'CORE DATA' },
        { name: 'DATABASE' },
        { name: 'GCD' },
        { name: 'CONCURRENCY' },
        { name: 'NAVIGATION' },
        { name: 'NOTIFICATIONS' },
        { name: 'DELEGATE' },
        { name: 'PATTERNS' },
        { name: 'SWIFTUI' },
        { name: 'UI' },
      ],
      question_content: [
        { text: 'MVC (Model-View-Controller) помогает разделять логику приложения, интерфейс и управление данными.' },
        { text: 'Swift — это современный язык программирования для iOS, он проще и быстрее, чем Objective-C.' },
        { text: 'Auto Layout используется для адаптации интерфейса к различным экранам и ориентациям устройства.' },
        { text: 'UIViewController имеет жизненные циклы, такие как viewDidLoad, viewWillAppear и другие.' },
        { text: 'Core Data — это фреймворк для управления локальной базой данных в приложениях iOS.' },
        { text: 'GCD позволяет управлять многопоточностью и эффективно распределять задачи.' },
        { text: 'Типы навигации: табличная, стековая, модальная, слайдерная.' },
        { text: 'Уведомления в iOS обрабатываются через фреймворк UserNotifications.' },
        { text: 'Delegate — это паттерн, позволяющий одному объекту делегировать задачи другому.' },
        { text: 'SwiftUI — это декларативный фреймворк для создания интерфейсов, более современный, чем UIKit.' },
      ],
    },
    'Flutter разработчик': {
      questions: [
        { quest: 'Что такое Flutter и его основные преимущества?', likeQuantity: 45, tags: [{ name: 'FLUTTER' }, { name: 'INTRODUCTION' }], isLiked: true, isPined: false },
        { quest: 'Какие виджеты в Flutter вы используете чаще всего?', likeQuantity: 30, tags: [{ name: 'WIDGETS' }], isLiked: true, isPined: true },
        { quest: 'Чем StatelessWidget отличается от StatefulWidget?', likeQuantity: 40, tags: [{ name: 'STATE MANAGEMENT' }], isLiked: false, isPined: false },
        { quest: 'Что такое Flutter Hot Reload и как оно работает?', likeQuantity: 50, tags: [{ name: 'TOOLS' }], isLiked: true, isPined: false },
        { quest: 'Как организовать маршрутизацию в приложении на Flutter?', likeQuantity: 35, tags: [{ name: 'NAVIGATION' }], isLiked: true, isPined: false },
        { quest: 'Какие варианты управления состоянием используются в Flutter?', likeQuantity: 25, tags: [{ name: 'STATE MANAGEMENT' }], isLiked: false, isPined: false },
        { quest: 'Как работает FutureBuilder в Flutter?', likeQuantity: 20, tags: [{ name: 'ASYNC' }, { name: 'WIDGETS' }], isLiked: true, isPined: false },
        { quest: 'Какие способы интеграции REST API вы используете в Flutter?', likeQuantity: 18, tags: [{ name: 'API' }, { name: 'NETWORKING' }], isLiked: false, isPined: true },
        { quest: 'Что такое pubspec.yaml, и зачем он нужен?', likeQuantity: 22, tags: [{ name: 'SETUP' }, { name: 'CONFIGURATION' }], isLiked: true, isPined: false },
        { quest: 'Как сделать адаптивный дизайн в Flutter?', likeQuantity: 12, tags: [{ name: 'RESPONSIVE DESIGN' }, { name: 'LAYOUT' }], isLiked: false, isPined: false },
      ],
      proftags: [
        { name: 'FLUTTER' },
        { name: 'INTRODUCTION' },
        { name: 'WIDGETS' },
        { name: 'STATE MANAGEMENT' },
        { name: 'TOOLS' },
        { name: 'NAVIGATION' },
        { name: 'ASYNC' },
        { name: 'API' },
        { name: 'NETWORKING' },
        { name: 'SETUP' },
        { name: 'CONFIGURATION' },
        { name: 'RESPONSIVE DESIGN' },
        { name: 'LAYOUT' },
      ],
      question_content: [
        { text: 'Flutter — это фреймворк от Google для разработки кроссплатформенных мобильных приложений с высоким качеством UI.' },
        { text: 'Часто используемые виджеты: Container, Row, Column, ListView, Text, Image.' },
        { text: 'StatelessWidget описывает неизменяемые виджеты, StatefulWidget — виджеты с изменяемым состоянием.' },
        { text: 'Hot Reload позволяет мгновенно видеть изменения в коде без перезапуска приложения.' },
        { text: 'Роутинг в Flutter организуется через Navigator, MaterialPageRoute или GoRouter.' },
        { text: 'Популярные подходы управления состоянием: Provider, Riverpod, BLoC, GetX.' },
        { text: 'FutureBuilder отображает виджеты на основе завершения асинхронных операций.' },
        { text: 'Интеграция REST API реализуется через библиотеку Dio или http.' },
        { text: 'pubspec.yaml управляет зависимостями, метаданными проекта и настройками сборки.' },
        { text: 'Адаптивный дизайн реализуется через MediaQuery, LayoutBuilder или пакет responsive_framework.' },
      ],
    },
    'QA инженер': {
      questions: [
        { quest: 'Что такое тестирование, и зачем оно нужно?', likeQuantity: 40, tags: [{ name: 'BASICS' }, { name: 'INTRODUCTION' }], isLiked: true, isPined: false },
        { quest: 'Какие виды тестирования вы знаете?', likeQuantity: 35, tags: [{ name: 'TYPES' }], isLiked: true, isPined: true },
        { quest: 'Объясните разницу между функциональным и нефункциональным тестированием.', likeQuantity: 30, tags: [{ name: 'FUNCTIONALITY' }, { name: 'PERFORMANCE' }], isLiked: false, isPined: false },
        { quest: 'Что такое тест-кейс и из чего он состоит?', likeQuantity: 25, tags: [{ name: 'DOCUMENTATION' }, { name: 'TEST CASES' }], isLiked: true, isPined: false },
        { quest: 'Как выполняется тестирование API?', likeQuantity: 22, tags: [{ name: 'API' }, { name: 'TOOLS' }], isLiked: true, isPined: false },
        { quest: 'Какие инструменты автоматизации тестирования вы знаете?', likeQuantity: 50, tags: [{ name: 'AUTOMATION' }, { name: 'TOOLS' }], isLiked: true, isPined: false },
        { quest: 'Что такое регрессионное тестирование и когда его проводить?', likeQuantity: 20, tags: [{ name: 'REGRESSION' }], isLiked: false, isPined: false },
        { quest: 'Как отличить баг, дефект и ошибку?', likeQuantity: 18, tags: [{ name: 'BUGS' }, { name: 'TYPES' }], isLiked: false, isPined: true },
        { quest: 'Что такое нагрузочное тестирование?', likeQuantity: 28, tags: [{ name: 'PERFORMANCE' }, { name: 'LOAD TESTING' }], isLiked: true, isPined: false },
        { quest: 'Какие подходы к тестированию вы используете?', likeQuantity: 15, tags: [{ name: 'APPROACHES' }, { name: 'STRATEGY' }], isLiked: false, isPined: false },
      ],
      proftags: [
        { name: 'BASICS' },
        { name: 'INTRODUCTION' },
        { name: 'TYPES' },
        { name: 'FUNCTIONALITY' },
        { name: 'PERFORMANCE' },
        { name: 'DOCUMENTATION' },
        { name: 'TEST CASES' },
        { name: 'API' },
        { name: 'TOOLS' },
        { name: 'AUTOMATION' },
        { name: 'REGRESSION' },
        { name: 'BUGS' },
        { name: 'LOAD TESTING' },
        { name: 'APPROACHES' },
        { name: 'STRATEGY' },
      ],
      question_content: [
        { text: 'Тестирование — это процесс проверки качества продукта, целью которого является выявление дефектов.' },
        { text: 'Основные виды тестирования: ручное, автоматизированное, регрессионное, нагрузочное, функциональное.' },
        { text: 'Функциональное тестирование проверяет работоспособность функций, нефункциональное — производительность, удобство использования.' },
        { text: 'Тест-кейс описывает шаги, ожидаемый результат и условия выполнения теста.' },
        { text: 'Тестирование API выполняется через инструменты, такие как Postman или Swagger.' },
        { text: 'Популярные инструменты автоматизации: Selenium, JUnit, TestNG, Appium.' },
        { text: 'Регрессионное тестирование проводится после изменений, чтобы убедиться, что существующий функционал не сломался.' },
        { text: 'Баг — это ошибка в программе, дефект — несоответствие требованиям, ошибка — действие разработчика.' },
        { text: 'Нагрузочное тестирование оценивает, как система работает под высокой нагрузкой.' },
        { text: 'Подходы к тестированию включают черный ящик, белый ящик, тестирование на основе рисков.' },
      ],
    },
    'Golang разработчик': {
      questions: [
        { quest: 'Что такое Go и его основные особенности?', likeQuantity: 50, tags: [{ name: 'INTRODUCTION' }, { name: 'LANGUAGE FEATURES' }], isLiked: true, isPined: false },
        { quest: 'Как работают горутины в Go?', likeQuantity: 45, tags: [{ name: 'CONCURRENCY' }, { name: 'GOROUTINES' }], isLiked: true, isPined: false },
        { quest: 'Что такое каналы в Go, и как они используются?', likeQuantity: 40, tags: [{ name: 'CHANNELS' }, { name: 'CONCURRENCY' }], isLiked: false, isPined: false },
        { quest: 'Как работает система сборки мусора (garbage collection) в Go?', likeQuantity: 30, tags: [{ name: 'MEMORY' }, { name: 'GARBAGE COLLECTION' }], isLiked: true, isPined: false },
        { quest: 'Какие пакеты стандартной библиотеки вы используете чаще всего?', likeQuantity: 25, tags: [{ name: 'STANDARD LIBRARY' }, { name: 'TOOLS' }], isLiked: true, isPined: false },
        { quest: 'Как обрабатывать ошибки в Go?', likeQuantity: 35, tags: [{ name: 'ERROR HANDLING' }, { name: 'BEST PRACTICES' }], isLiked: true, isPined: false },
        { quest: 'Объясните, как работает defer в Go.', likeQuantity: 20, tags: [{ name: 'DEFER' }, { name: 'FUNCTIONS' }], isLiked: false, isPined: false },
        { quest: 'Что такое интерфейсы в Go и как они реализуются?', likeQuantity: 18, tags: [{ name: 'INTERFACES' }, { name: 'OOP' }], isLiked: false, isPined: true },
        { quest: 'Как работает встроенный HTTP-сервер в Go?', likeQuantity: 28, tags: [{ name: 'NETWORKING' }, { name: 'HTTP' }], isLiked: true, isPined: false },
        { quest: 'Какие инструменты для тестирования кода доступны в Go?', likeQuantity: 22, tags: [{ name: 'TESTING' }, { name: 'TOOLS' }], isLiked: false, isPined: false },
      ],
      proftags: [
        { name: 'INTRODUCTION' },
        { name: 'LANGUAGE FEATURES' },
        { name: 'CONCURRENCY' },
        { name: 'GOROUTINES' },
        { name: 'CHANNELS' },
        { name: 'MEMORY' },
        { name: 'GARBAGE COLLECTION' },
        { name: 'STANDARD LIBRARY' },
        { name: 'TOOLS' },
        { name: 'ERROR HANDLING' },
        { name: 'BEST PRACTICES' },
        { name: 'DEFER' },
        { name: 'FUNCTIONS' },
        { name: 'INTERFACES' },
        { name: 'OOP' },
        { name: 'NETWORKING' },
        { name: 'HTTP' },
        { name: 'TESTING' },
      ],
      question_content: [
        { text: 'Go — это язык программирования от Google, разработанный для повышения производительности и упрощения кода.' },
        { text: 'Горутины — это легковесные потоки, которые позволяют выполнять несколько задач одновременно.' },
        { text: 'Каналы используются для синхронизации и передачи данных между горутинами.' },
        { text: 'Garbage collection в Go автоматически освобождает неиспользуемую память.' },
        { text: 'Популярные пакеты стандартной библиотеки: fmt, net/http, io, os, encoding/json.' },
        { text: 'Обработка ошибок в Go основана на возвращении значений ошибок и их явной проверке.' },
        { text: 'defer откладывает выполнение функций до завершения родительской функции.' },
        { text: 'Интерфейсы в Go позволяют описывать методы, которые должен реализовывать объект.' },
        { text: 'HTTP-сервер в Go запускается через пакет net/http с минимальной конфигурацией.' },
        { text: 'Инструменты для тестирования: встроенный пакет testing, go test, и сторонние библиотеки.' },
      ],
    },
    'PHP разработчик': {
      questions: [
        { quest: 'Что такое PHP и где он используется?', likeQuantity: 45, tags: [{ name: 'INTRODUCTION' }, { name: 'USAGE' }], isLiked: true, isPined: false },
        { quest: 'Как работают суперглобальные массивы в PHP?', likeQuantity: 40, tags: [{ name: 'GLOBALS' }, { name: 'VARIABLES' }], isLiked: true, isPined: false },
        { quest: 'Объясните разницу между require и include.', likeQuantity: 30, tags: [{ name: 'FILES' }, { name: 'BEST PRACTICES' }], isLiked: false, isPined: false },
        { quest: 'Что такое PDO и как его использовать для работы с базой данных?', likeQuantity: 35, tags: [{ name: 'DATABASE' }, { name: 'PDO' }], isLiked: true, isPined: false },
        { quest: 'Какие принципы ООП поддерживает PHP?', likeQuantity: 50, tags: [{ name: 'OOP' }, { name: 'PRINCIPLES' }], isLiked: true, isPined: false },
        { quest: 'Как работают сессии в PHP?', likeQuantity: 25, tags: [{ name: 'SESSIONS' }, { name: 'SECURITY' }], isLiked: true, isPined: false },
        { quest: 'Что такое Composer и зачем он нужен?', likeQuantity: 20, tags: [{ name: 'TOOLS' }, { name: 'DEPENDENCIES' }], isLiked: false, isPined: false },
        { quest: 'Как обрабатывать исключения в PHP?', likeQuantity: 28, tags: [{ name: 'ERROR HANDLING' }, { name: 'EXCEPTIONS' }], isLiked: false, isPined: true },
        { quest: 'Что такое PSR стандарты и почему они важны?', likeQuantity: 18, tags: [{ name: 'STANDARDS' }, { name: 'BEST PRACTICES' }], isLiked: true, isPined: false },
        { quest: 'Как сделать безопасную обработку пользовательских данных в PHP?', likeQuantity: 22, tags: [{ name: 'SECURITY' }, { name: 'VALIDATION' }], isLiked: false, isPined: false },
      ],
      proftags: [
        { name: 'INTRODUCTION' },
        { name: 'USAGE' },
        { name: 'GLOBALS' },
        { name: 'VARIABLES' },
        { name: 'FILES' },
        { name: 'BEST PRACTICES' },
        { name: 'DATABASE' },
        { name: 'PDO' },
        { name: 'OOP' },
        { name: 'PRINCIPLES' },
        { name: 'SESSIONS' },
        { name: 'SECURITY' },
        { name: 'TOOLS' },
        { name: 'DEPENDENCIES' },
        { name: 'ERROR HANDLING' },
        { name: 'EXCEPTIONS' },
        { name: 'STANDARDS' },
        { name: 'VALIDATION' },
      ],
      question_content: [
        { text: 'PHP — это скриптовый язык общего назначения, часто используемый для разработки серверной части веб-приложений.' },
        { text: 'Суперглобальные массивы, такие как $_GET, $_POST, $_SESSION, содержат предопределенные переменные для работы с данными.' },
        { text: 'require вызывает критическую ошибку при отсутствии файла, include — только предупреждение.' },
        { text: 'PDO (PHP Data Objects) — это интерфейс для работы с базами данных, поддерживающий подготовленные запросы.' },
        { text: 'PHP поддерживает принципы ООП: инкапсуляция, наследование, полиморфизм.' },
        { text: 'Сессии позволяют сохранять данные пользователя между запросами, используя $_SESSION.' },
        { text: 'Composer — инструмент для управления зависимостями и автозагрузки в PHP.' },
        { text: 'Исключения в PHP обрабатываются с помощью блоков try-catch.' },
        { text: 'PSR (PHP Standards Recommendations) задает стандарты кодирования, улучшая читаемость и совместимость.' },
        { text: 'Для безопасной обработки данных используйте фильтрацию, подготовленные запросы и функции валидации.' },
      ],
    },
    'Java разработчик': {
      questions: [
        { quest: 'Что такое Java и какие у нее основные особенности?', likeQuantity: 50, tags: [{ name: 'INTRODUCTION' }, { name: 'FEATURES' }], isLiked: true, isPined: false },
        { quest: 'Как работает JVM (Java Virtual Machine)?', likeQuantity: 45, tags: [{ name: 'JVM' }, { name: 'ARCHITECTURE' }], isLiked: true, isPined: false },
        { quest: 'Объясните разницу между JDK, JRE и JVM.', likeQuantity: 40, tags: [{ name: 'TOOLS' }, { name: 'ENVIRONMENT' }], isLiked: true, isPined: false },
        { quest: 'Что такое наследование в Java и как оно работает?', likeQuantity: 35, tags: [{ name: 'OOP' }, { name: 'INHERITANCE' }], isLiked: true, isPined: false },
        { quest: 'Как работают коллекции в Java?', likeQuantity: 50, tags: [{ name: 'COLLECTIONS' }, { name: 'DATA STRUCTURES' }], isLiked: true, isPined: false },
        { quest: 'Что такое исключения в Java и как их обрабатывать?', likeQuantity: 30, tags: [{ name: 'ERROR HANDLING' }, { name: 'EXCEPTIONS' }], isLiked: false, isPined: false },
        { quest: 'Объясните концепцию потоков (threads) в Java.', likeQuantity: 28, tags: [{ name: 'CONCURRENCY' }, { name: 'THREADS' }], isLiked: true, isPined: false },
        { quest: 'Что такое интерфейсы и абстрактные классы в Java?', likeQuantity: 25, tags: [{ name: 'OOP' }, { name: 'DESIGN' }], isLiked: true, isPined: false },
        { quest: 'Как работает сборщик мусора (Garbage Collector) в Java?', likeQuantity: 20, tags: [{ name: 'MEMORY' }, { name: 'GARBAGE COLLECTION' }], isLiked: false, isPined: true },
        { quest: 'Какие самые популярные библиотеки и фреймворки используют Java разработчики?', likeQuantity: 35, tags: [{ name: 'FRAMEWORKS' }, { name: 'LIBRARIES' }], isLiked: true, isPined: false },
      ],
      proftags: [
        { name: 'INTRODUCTION' },
        { name: 'FEATURES' },
        { name: 'JVM' },
        { name: 'ARCHITECTURE' },
        { name: 'TOOLS' },
        { name: 'ENVIRONMENT' },
        { name: 'OOP' },
        { name: 'INHERITANCE' },
        { name: 'COLLECTIONS' },
        { name: 'DATA STRUCTURES' },
        { name: 'ERROR HANDLING' },
        { name: 'EXCEPTIONS' },
        { name: 'CONCURRENCY' },
        { name: 'THREADS' },
        { name: 'DESIGN' },
        { name: 'MEMORY' },
        { name: 'GARBAGE COLLECTION' },
        { name: 'FRAMEWORKS' },
        { name: 'LIBRARIES' },
      ],
      question_content: [
        { text: 'Java — это объектно-ориентированный язык программирования, известный своей портативностью и производительностью.' },
        { text: 'JVM интерпретирует байт-код и обеспечивает выполнение программ на различных платформах.' },
        { text: 'JDK — комплект для разработки, JRE — среда выполнения, JVM — виртуальная машина для выполнения байт-кода.' },
        { text: 'Наследование в Java позволяет одному классу принимать свойства и методы другого класса.' },
        { text: 'Коллекции в Java — это наборы объектов, организованных в виде списков, сетов, очередей и мапов.' },
        { text: 'Исключения в Java обрабатываются с использованием блоков try-catch-finally.' },
        { text: 'Threads позволяют выполнять несколько потоков одновременно, поддерживая многозадачность.' },
        { text: 'Интерфейсы задают контракт методов, а абстрактные классы позволяют реализовывать общую логику.' },
        { text: 'Garbage Collector автоматически управляет памятью, удаляя неиспользуемые объекты.' },
        { text: 'Популярные библиотеки и фреймворки: Spring, Hibernate, Apache Kafka, Maven, и другие.' },
      ],
    },
    'Node.js разработчик': {
      questions: [
        { quest: 'Что такое Node.js и его основные особенности?', likeQuantity: 50, tags: [{ name: 'INTRODUCTION' }, { name: 'FEATURES' }], isLiked: true, isPined: false },
        { quest: 'Как работает событийно-ориентированная модель в Node.js?', likeQuantity: 45, tags: [{ name: 'EVENT LOOP' }, { name: 'ARCHITECTURE' }], isLiked: true, isPined: false },
        { quest: 'Какие основные модули Node.js вы используете?', likeQuantity: 40, tags: [{ name: 'MODULES' }, { name: 'TOOLS' }], isLiked: false, isPined: false },
        { quest: 'Объясните работу потоков и асинхронность в Node.js.', likeQuantity: 35, tags: [{ name: 'CONCURRENCY' }, { name: 'THREADS' }], isLiked: true, isPined: false },
        { quest: 'Какой модуль используется для работы с файловой системой в Node.js?', likeQuantity: 30, tags: [{ name: 'FS' }, { name: 'MODULES' }], isLiked: false, isPined: false },
        { quest: 'Что такое package.json и как его использовать?', likeQuantity: 28, tags: [{ name: 'PACKAGE MANAGEMENT' }, { name: 'NPM' }], isLiked: true, isPined: false },
        { quest: 'Как реализовать REST API с использованием Node.js?', likeQuantity: 45, tags: [{ name: 'API' }, { name: 'REST' }], isLiked: true, isPined: false },
        { quest: 'Что такое middleware в Express.js?', likeQuantity: 35, tags: [{ name: 'EXPRESS' }, { name: 'MIDDLEWARE' }], isLiked: true, isPined: false },
        { quest: 'Как обрабатывать ошибки в Node.js приложениях?', likeQuantity: 25, tags: [{ name: 'ERROR HANDLING' }, { name: 'BEST PRACTICES' }], isLiked: false, isPined: true },
        { quest: 'Какие инструменты можно использовать для тестирования приложений на Node.js?', likeQuantity: 20, tags: [{ name: 'TESTING' }, { name: 'TOOLS' }], isLiked: false, isPined: false },
      ],
      proftags: [
        { name: 'INTRODUCTION' },
        { name: 'FEATURES' },
        { name: 'EVENT LOOP' },
        { name: 'ARCHITECTURE' },
        { name: 'MODULES' },
        { name: 'TOOLS' },
        { name: 'CONCURRENCY' },
        { name: 'THREADS' },
        { name: 'FS' },
        { name: 'PACKAGE MANAGEMENT' },
        { name: 'NPM' },
        { name: 'API' },
        { name: 'REST' },
        { name: 'EXPRESS' },
        { name: 'MIDDLEWARE' },
        { name: 'ERROR HANDLING' },
        { name: 'BEST PRACTICES' },
        { name: 'TESTING' },
      ],
      question_content: [
        { text: 'Node.js — это среда выполнения JavaScript, которая позволяет использовать JavaScript вне браузера.' },
        { text: 'Событийно-ориентированная модель в Node.js работает через цикл событий (Event Loop), обрабатывая события асинхронно.' },
        { text: 'Основные модули Node.js: fs, http, path, os, stream.' },
        { text: 'Асинхронность в Node.js достигается благодаря неблокирующему вводу-выводу и потокам.' },
        { text: 'Модуль fs используется для работы с файловой системой, включая чтение и запись файлов.' },
        { text: 'package.json содержит метаинформацию о проекте, включая зависимости, скрипты и конфигурации.' },
        { text: 'REST API можно реализовать с помощью Express.js, задавая маршруты и обработчики запросов.' },
        { text: 'Middleware в Express.js — это функции, которые выполняются между запросом клиента и ответом сервера.' },
        { text: 'Обработка ошибок в Node.js возможна через блоки try-catch или middleware для обработки ошибок в Express.' },
        { text: 'Для тестирования можно использовать инструменты: Mocha, Chai, Jest, Supertest.' },
      ],
    },
                                            
    // Add more professions here...
  };
  